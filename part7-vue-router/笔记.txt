<router-link to="/bar"></router-link>

<router-view></router-view>

const Foo = {
  template: '<div>this is Foo</div>'
}

const routes = [
  {path: '/foo', component: Foo},
  {path: '/bar', component: Bar}
]

const router = new VueRouter({
  routes
})

const vm = new Vue({
  router
})

2.1 动态路由

routes = {
  path: '/news/:id',
  component: News
}

组件中获取 
this.$route.params
this.$route.query

当在一个组件中进行调用时,组件之间会被复用,所以对应的生命着周期钩子不会被触发
解决办法: 
1. watch: {
  "$route"(to, from) {
    // 对路由变化作出反应
  }
}

2.使用beforeRouteUpdate

beforeRouteUpdate(to, from, next) {
  // react to route change
  // don't forget to call next()
}

2.2  嵌套路由

/bar/aaa
/bar/bbb

一个被渲染的组件中,也可以包含自己的router-view

var bar = {
  template: `
    <p>this is bar</p>
    <router-view></router-view>
  `
}

2.3 编程式导航
除了使用<router-link>创建a标签来定义导航链接,我们还可以借助router的实例方法,通过编写代码来实现
router.push()
会在history中添加记录
router.replace() 不会在history中添加记录,会替换掉当前的history()
router.go(n) 意思在history记录中向前或者后退多少步


2.4 命名路由
有时候通过名称标识一个路由显得更方便一些,特别是在链接一个路由,或者是执行一些跳转的时候,你可以在创建Router实例的时候,在routes配置中给某个路由设置名称
const router = new VueRouter({
  routes: [{
    path: '/user/:id',
    name: 'user',
    component: User
  }]
})

<router-link :to="{name: 'User', params: {id: 123}}"></router-link>

router.push({name: 'User', params: {id : 123}})

2.5 命名视图
命名视图主要就是解决在一个路由下,一次性进行多个组件的展示

<router-view></router-view>
<router-view name="a"></router-view>
<router-view name="b"></router-view>
没有命名的router-view,默认名称为name="default"

const router = new VueRouter({
  path: '/',
  components: {
    default: Home,
    a: Bar,
    b: Foo
  }
})

2.6 重定向和别名

重定向
{ path: '/a', redirect: '/b'}
{ path: '/a', redirect: {name: 'a'}}
{ path: '/a', redirect(to) {
  const {hash, query, params} = to;
  if(query.a == 'aa') {
    return {path: '/a', query: null}
  }
}}

别名
重定向的意思是,当用户访问/a时,url将会被替换成/b,然后匹配路由为/b

/a别名是/b,意味着,当用户访问/b时,url会保持/b,但是路由匹配规则为/a,就像用户访问/a一样

const router = new VueRouter({
  routes: [{
    path: '/a', component: A, alias: '/b'
  }]
})

2.7 路由组件传参
在组件中使用$route会使之与对应路由形成高度耦合,从而是组件只能在某些特定的url上使用,限制了灵活性

使用props将组件和路由解藕

取代与$route的耦合
const User = {
  template: `
    <div>User {{$route.params.id}}</div>
  `
}

const routes = [
  {path: '/user/:id', component: User}
]


通过props解藕
const User = {
  props: ['id'],
  template: `<div>User {{id}}</div>`
}

const router = new VueRouter({
  routes: [
    {path: '/user/:id', component: User, props: true}
  ]
})

// 对于包含命名视图的路由,你必须分别为每个命名视图添加props选项
const router = new VueRouter({
  routes: [
    {
      path: '/user', 
      components: {
        default: User,
        siderbar: SiderBar
      },
      props: {
        default: true,
        siderbar: false
      }
    }
  ]
})

布尔值模式
如果props被设置位true, route.params将会被设置组件的属性

对象模式
如果props是一个对象,它会被按原样设置为组件属性,当props是静态的时候有用
const router = new VueRouter({
  routes: [
    {
      path: '/news/new-detail',
      component: NewsDetail,
      props: {
        newsDetail: true
      }
    }
  ]
})

函数模式
你可以创建一个函数返回props,这样你便可以将参数转换成另一种类型,将静态值与基于路由的值结合等等
const router = new VueRouter({
  routes: [
    {
      path: '/news',
      component: News,
      props(route) {
        return {
          query: route.query.q
        }
      }
    }
  ]
})
Url /news?q='notice',会将{query: {q: 'notice'}},作为属性传递给News组件
应保持props状态是无状态的,因为它只会在路由发生变化的时候起作用

3-1 导航守卫
正如其名,vue-router提供的导航守卫主要用来通过跳转或者取消的方式守卫导航,有很多机会植入路由导航过程中: 全局的,单个路由独享的,或者组件级的

参数或者查询的改变并不会触发进入/离开的导航守卫,你可以通过观察$route对象对应这些变化,或使用beforeRouteUpdate的组件内守卫

1.全局守卫

const router = new VueRouter({ ... });
router.beforeEach((to, from, next) => {
  // ...
})

当一个导航触发时,全局前置守卫按照创建顺序调用.守卫是异步解析执行,此时导航在所有守卫resolve完成之前一直处于等待中

每个守卫方法接受三个参数:
to: Route 即将要进入的目标, 路由对象
from: Route 当前导航正要离开的路由
next: function 一定要调用该方法来resolve钩子,执行效果依赖next方法的调用参数

next() 进行管道中的下一个钩子,如果全部钩子执行完了

进行git测试 需要删除







