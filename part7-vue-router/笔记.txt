<router-link to="/bar"></router-link>

<router-view></router-view>

const Foo = {
  template: '<div>this is Foo</div>'
}

const routes = [
  {path: '/foo', component: Foo},
  {path: '/bar', component: Bar}
]

const router = new VueRouter({
  routes
})

const vm = new Vue({
  router
})

2.1 动态路由

routes = {
  path: '/news/:id',
  component: News
}

组件中获取 
this.$route.params
this.$route.query

当在一个组件中进行调用时,组件之间会被复用,所以对应的生命着周期钩子不会被触发
解决办法: 
1. watch: {
  "$route"(to, from) {
    // 对路由变化作出反应
  }
}

2.使用beforeRouteUpdate

beforeRouteUpdate(to, from, next) {
  // react to route change
  // don't forget to call next()
}

2.2  嵌套路由

/bar/aaa
/bar/bbb

一个被渲染的组件中,也可以包含自己的router-view

var bar = {
  template: `
    <p>this is bar</p>
    <router-view></router-view>
  `
}

2.3 编程式导航
除了使用<router-link>创建a标签来定义导航链接,我们还可以借助router的实例方法,通过编写代码来实现
router.push()
会在history中添加记录
router.replace() 不会在history中添加记录,会替换掉当前的history()
router.go(n) 意思在history记录中向前或者后退多少步


2.4 命名路由
有时候通过名称标识一个路由显得更方便一些,特别是在链接一个路由,或者是执行一些跳转的时候,你可以在创建Router实例的时候,在routes配置中给某个路由设置名称
const router = new VueRouter({
  routes: [{
    path: '/user/:id',
    name: 'user',
    component: User
  }]
})

<router-link :to="{name: 'User', params: {id: 123}}"></router-link>

router.push({name: 'User', params: {id : 123}})

2.5 命名视图
命名视图主要就是解决在一个路由下,一次性进行多个组件的展示

<router-view></router-view>
<router-view name="a"></router-view>
<router-view name="b"></router-view>
没有命名的router-view,默认名称为name="default"

const router = new VueRouter({
  path: '/',
  components: {
    default: Home,
    a: Bar,
    b: Foo
  }
})

2.6 重定向和别名

重定向
{ path: '/a', redirect: '/b'}
{ path: '/a', redirect: {name: 'a'}}
{ path: '/a', redirect(to) {
  const {hash, query, params} = to;
  if(query.a == 'aa') {
    return {path: '/a', query: null}
  }
}}

别名
重定向的意思是,当用户访问/a时,url将会被替换成/b,然后匹配路由为/b

/a别名是/b,意味着,当用户访问/b时,url会保持/b,但是路由匹配规则为/a,就像用户访问/a一样

const router = new VueRouter({
  routes: [{
    path: '/a', component: A, alias: '/b'
  }]
})

2.7 路由组件传参
在组件中使用$route会使之与对应路由形成高度耦合,从而是组件只能在某些特定的url上使用,限制了灵活性

使用props将组件和路由解藕

取代与$route的耦合
const User = {
  template: `
    <div>User {{$route.params.id}}</div>
  `
}

const routes = [
  {path: '/user/:id', component: User}
]


通过props解藕
const User = {
  props: ['id'],
  template: `<div>User {{id}}</div>`
}

const router = new VueRouter({
  routes: [
    {path: '/user/:id', component: User, props: true}
  ]
})

// 对于包含命名视图的路由,你必须分别为每个命名视图添加props选项
const router = new VueRouter({
  routes: [
    {
      path: '/user', 
      components: {
        default: User,
        siderbar: SiderBar
      },
      props: {
        default: true,
        siderbar: false
      }
    }
  ]
})

布尔值模式
如果props被设置位true, route.params将会被设置组件的属性

对象模式
如果props是一个对象,它会被按原样设置为组件属性,当props是静态的时候有用
const router = new VueRouter({
  routes: [
    {
      path: '/news/new-detail',
      component: NewsDetail,
      props: {
        newsDetail: true
      }
    }
  ]
})

函数模式
你可以创建一个函数返回props,这样你便可以将参数转换成另一种类型,将静态值与基于路由的值结合等等
const router = new VueRouter({
  routes: [
    {
      path: '/news',
      component: News,
      props(route) {
        return {
          query: route.query.q
        }
      }
    }
  ]
})
Url /news?q='notice',会将{query: {q: 'notice'}},作为属性传递给News组件
应保持props状态是无状态的,因为它只会在路由发生变化的时候起作用

3-1 导航守卫
正如其名,vue-router提供的导航守卫主要用来通过跳转或者取消的方式守卫导航,有很多机会植入路由导航过程中: 全局的,单个路由独享的,或者组件级的

参数或者查询的改变并不会触发进入/离开的导航守卫,你可以通过观察$route对象对应这些变化,或使用beforeRouteUpdate的组件内守卫

1.全局守卫

const router = new VueRouter({ ... });
router.beforeEach((to, from, next) => {
  // ...
})

当一个导航触发时,全局前置守卫按照创建顺序调用.守卫是异步解析执行,此时导航在所有守卫resolve完成之前一直处于等待中

每个守卫方法接受三个参数:
to: Route 即将要进入的目标, 路由对象
from: Route 当前导航正要离开的路由
next: function 一定要调用该方法来resolve钩子,执行效果依赖next方法的调用参数

next() 进行管道中的下一个钩子,如果全部钩子执行完了


使用vuejs 我们可以通过组合组件来组成应用程序
使用vue router添加进来，我们需要做的是，将组件映射到路由，然后vue router告诉vue在哪里渲染他们

this.$router 访问路由器
this.$route 访问当前路由

当<router-link>对应的路由匹配成功，将自动设置class属性值 .router-link-active

part1 动态路由
动态路由: 某种模式匹配到的所有路由，全部映射到同个组件
动态路径参数，以冒号开头
一个路径参数使用冒号:标记，当匹配到一个路由时，参数值会被设置到this.$route.params, 可以在每个组件内使用。于是我们可以更新user模板，输出当前id
this.$route.params.id

/user/123 切换到user/345，原来的组件实例会被复用，因为两个路由渲染的是同一个组件，比起销毁再创建，复用更加高效，所以组件的生命周期钩子不会被再次调用

复用组件的时候，想对路由参数的变化作出相应的话，，这时可以watch $route变化
watch: {
  '$route'(to, from) {
     // 路由变化
  }
}

路由守卫
beforeRouteUpdate(to, from, next) {

}

有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。

part2 嵌套路由
以 / 开头的嵌套路径会被当作根路径，这让你充分的使用嵌套组件而无需设置嵌套的路径

part3 编程式导航
除了使用<router-link> 创建a标签来定义导航链接， 我们还可以借助router的实例方法， 通过编写代码来实现
router.push(location, onComplete, onAbort)

在vue实例内部，使用$router访问到路由实例，通过this.$router.push
想要导航到不同的url可以使用router.push方法，这个方法会向history栈中添加一条新的记录，所以当浏览器点击后退按钮的时候，会回到之前的url

当你点击<router-link>时。这个方法会在内部调用，所以说点击<router-link :to=""> 等同于调用router.push()

参数是一个字符串或者一个对象
router.push('home')
router.push({path: 'home'})
router.push({name: 'user', {params: {id: 123}}})
router.push({path: '/reg/bbb', query: {a: 121}})

提供了path, params会被忽略
const userId = 123
router.push({ name: 'user', params: { userId }}) // -> /user/123
router.push({ path: `/user/${userId}` }) // -> /user/123
// 这里的 params 不生效
router.push({ path: '/user', params: { userId }}) // -> /user

在 2.2.0+，可选的在 router.push 或 router.replace 中提供 onComplete 和 onAbort 回调作为第二个和第三个参数。这些回调将会在导航成功完成 (在所有的异步钩子被解析之后) 或终止 (导航到相同的路由、或在当前导航完成之前导航到另一个不同的路由) 的时候进行相应的调用。

**注意：**如果目的地和当前路由相同，只有参数发生了改变 (比如从一个用户资料到另一个 /users/1 -> /users/2)，你需要使用 beforeRouteUpdate 来响应这个变化 (比如抓取用户信息)。

router.replace(location, onComplete, onAbort)
不会向history添加新的记录，并且会替换掉当前的记录

router.go(n)

这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)
// 在浏览器记录中前进一步，等同于 history.forward()
router.go(1)

// 后退一步记录，等同于 history.back()
router.go(-1)

// 前进 3 步记录
router.go(3)

// 如果 history 记录不够用，那就默默地失败呗
router.go(-100)
router.go(100)

part4 命名路由
有时候，通过一个名称标识一个路由显得更方便一些，特别在链接一个路由，或者执行一些跳转的时候
const router = new VueRouter({
  routes: [
    {
      path: '/user/:userId',
      name: 'user',
      component: User
    }
  ]
})
<router-link :to="{ name: 'user', params: { userId: 123 }}">User</router-link>
router.push({ name: 'user', params: { userId: 123 }})

part5 命名视图
有时候想同时展示多个视图，不是嵌套展示，比如页面需要展示slider 和 content 这时候命名视图就可以使用了，你可以在一个界面上拥有多个单独命名的视图，而不是只有一个单独的出口，
如果router-view 没有设置名字，那么默认为default
const routes = [
    {
        path: '/user',
        name: 'user',
        components: {
            default: User,
//          a: A, 当对应的router-view没有匹配到组件的时候，不显示
            b: B
        }
    }
]

<router-view></router-view>
<router-view name="a"></router-view>
<router-view name="b"></router-view>

part6 重定向和别名

const router = new VueRouter({
  routes: [
    { path: '/a', redirect: '/b' }
  ]
})

const router = new VueRouter({
  routes: [
    { path: '/a', redirect: {name: 'user'} }
  ]
})

别名
const router = new VueRouter({
  routes: [
    { path: '/a', component: A, alias: '/b' }
  ]
})
url 是/b， 但是实际上是/a

part7 路由组件传参
url中传递参数，在组件中使用 $route 在组件中获取参数，会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。
使用props将组件和路由解耦

const routes = [
    {
        path: '/user/:id',
        component: User,
        props: false
    }
]

props设置成boolean， route.params 将会被设置为组件属性。

如果 props 是一个对象，它会被按原样设置为组件属性。当 props 是静态的时候有用。

part8 路由守卫
vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航
有多种机会植入路由导航过程中：全局的，单个路由独享的，或者组件级的

全局守卫
通过router.beforeEach注册一个全局前置守卫
const router = new VueRouter({

})

router.beforeEach((to, from, next) => {

})

当一个导航触发的时候，全局前置守卫按照创建的顺序调用。
守卫异步解析执行，此时导航在所有守卫resolve完之前一直处于等待中

to Route: 即将进入的路由
from Route: 当前导航正要离开的路由
next Function: 一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数
next() 进行管道中的下一个钩子，如果全部钩子执行完了。则导航的状态就是confirmed
next(false) 中断当前的导航，如果浏览器的URL地址改变了(可能是用户手动或者浏览器后退按钮)，那么URL地址会重置到from路由对应的地址
next('/')或者next({path: '/'}) 跳转到一个不同的地址
当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。

全局解析守卫
可以使用router.beforeResolve注册一个全局守卫
和router.beforeEach类似，区别就是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫被调用

全局后置钩子
可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受next函数，也不会改变导航本身
router.afterEach(() => {
  console.log(111111)
})

路由独享守卫
var routes = [
  {
    path: '/boo',
    component: Boo,
    beforeEnter(to, from, next) {
      next()
    }
  }
]

组件内守卫
可以在路由组件内直接定义以下路由导航守卫
data() {
    return {
        a: 1
    }
},
beforeRouteEnter(to, from, next) {
    // 在渲染该组件对应的路由被confim之前调用，因为组件的实例还没有被创建
    // 因为当路由执行前，组件实例还没创建，所以不能获取当前组件的this
    console.log('beforeRouteEnter')
    // next('/boo');
    next((vm) => {
        // afterEach之后才会执行这个回调函数
        console.log(vm.a)
    })
},
beforeRouteUpdate(to, from, next) {
    // 当路由改变的时候，但是该组件被复用时调用
    // /foo/1跳转到/foo/2 之间进行跳转的时候，会被调用
    // 由于会渲染同样的foo组件，所以组件会被复用，生命周期不会被执行，这个钩子就是在这样的情况下调用
    // 可以获取到当前组件的this
    console.log('beforeRouteUpdate')
    next()
},
beforeRouteLeave(to, from, next) {
    console.log('beforeRouteLeave')
    // 导航离开该组件对应的路由时调用， 可以访问到当前组件的this
    next()
    // 一般用来禁止用户还未保存修改前突然离开。该导航可以通过next(false)来取消
}

beforeEach
beforeEnter
beforeRouteEnter
beforeResolve
afterEach

导航被触发。
在失活的组件里调用离开守卫。
调用全局的 beforeEach 守卫。
在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。
在路由配置里调用 beforeEnter。
解析异步路由组件。
在被激活的组件里调用 beforeRouteEnter。
调用全局的 beforeResolve 守卫 (2.5+)。
导航被确认。
调用全局的 afterEach 钩子。
触发 DOM 更新。
用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。


路由元信息

定义路由的时候有一个字段meta

首先，我们称呼 routes 配置中的每个路由对象为 路由记录。路由记录可以是嵌套的，因此，当一个路由匹配成功后，他可能匹配多个路由记录

routes = [
  {
    path: '/foo',
    component: Foo,
    children: [
      {
        path: 'bar',
        component: Bar,
        // a meta field
        meta: { requiresAuth: true }
      }
    ]
  }
]

根据上面的路由配置，/foo/bar 这个 URL 将会匹配父路由记录以及子路由记录。

一个路由匹配到的所有路由记录会暴露为 $route 对象 (还有在导航守卫中的路由对象) 的 $route.matched 数组。因此，我们需要遍历 $route.matched 来检查路由记录中的 meta 字段。



